name: CI/CD Pipeline

on:
  workflow_dispatch: # 手动触发
  repository_dispatch: # 通过 API 触发
  # 注意: GitHub Actions 不直接支持忽略推送事件，但你可以选择不列出 push 事件来达到相似效果

jobs:
  notify_start:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }} # 忽略 push 事件
    steps:
      - name: Notify Start
        run: |
          PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H "Content-Type: application/json" -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"🚀 构建开始 [查看控制台]($PIPELINE_URL)\"}}" ${{ secrets.WEB_HOOK_URL }}

  build:
    needs: notify_start
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: |
          java -version
          mvn clean package
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: jetbrains-license.jar
          path: target/jetbrains-license.jar
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' && success() }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: jetbrains-license.jar
          path: target
      - name: Deploy
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "cp /opt/module/jetbrains-license/jetbrains-license.jar /opt/module/jetbrains-license/jetbrains-license_$(date +\"%Y%m%d%H%M\").jar"
          scp target/jetbrains-license.jar ${{ secrets.USER }}@${{ secrets.HOST }}:/opt/module/jetbrains-license/jetbrains-license.jar
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "/opt/module/jetbrains-license/startup.sh"

  notify_success:
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' && success() }}
    steps:
      - name: Notify Success
        run: |
          PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H "Content-Type: application/json" -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"🎉 构建成功 [查看控制台]($PIPELINE_URL)\"}}" ${{ secrets.WEB_HOOK_URL }}

  notify_failure:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'push' && failure() }}
    steps:
      - name: Notify Failure
        run: |
          PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H "Content-Type: application/json" -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"❌ 构建失败 [查看控制台]($PIPELINE_URL)\"}}" ${{ secrets.WEB_HOOK_URL }}
