# 使用shell 执行器进行构建
default:
  tags:
    - shell-runner

workflow:
  rules:
    # 推送代码不开始构建
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    # 手动构建才开始
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

stages:
  - notify_start
  - build
  - deploy
  - notify_success
  - notify_failure

# 构建开始消息通知
notify_start:
  stage: notify_start
  script:
    - PIPELINE_URL="${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}"
    - >
      curl -X POST -H "Content-Type: application/json" -d "{\"msgtype\": \"markdown\", \"markdown\": {\"content\": \"<font color=\\\"info\\\">【$CI_PROJECT_NAMESPACE » $CI_PROJECT_NAME】</font>\\n >构建<font color=\\\"comment\\\">开始</font>\\n >构建参数：<font color=\\\"comment\\\">branch=${CI_COMMIT_REF_NAME} </font>\\n >[查看控制台](${PIPELINE_URL})\"}}" $WEB_HOOK_URL

# 构建成功消息通知
notify_success:
  stage: notify_success
  rules:
    - when: on_success
  script:
    - PIPELINE_URL="${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}"
    - >
      curl -X POST -H "Content-Type: application/json" -d "{\"markdown\": {\"content\": \"<font color=\\\"info\\\">【$CI_PROJECT_NAMESPACE » $CI_PROJECT_NAME】</font>\\n >构建<font color=\\\"info\\\">成功~</font>👍\\n >[查看控制台](${PIPELINE_URL})\"}, \"msgtype\": \"markdown\"}" $WEB_HOOK_URL

# 构建失败消息通知
notify_failure:
  stage: notify_failure
  rules:
    - when: on_failure
  script:
    - PIPELINE_URL="${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}"
    - >
      curl -X POST -H "Content-Type: application/json" -d "{\"markdown\": {\"content\": \"<font color=\\\"info\\\">【$CI_PROJECT_NAMESPACE » $CI_PROJECT_NAME】</font>\\n >构建<font color=\\\"warning\\\">异常</font>\\n >[查看控制台](${PIPELINE_URL})\"}, \"msgtype\": \"markdown\"}" $WEB_HOOK_URL

# 构建
build:
  stage: build
  rules:
    - when: on_success
  script:
    - export JAVA_HOME=/opt/module/java/java21
    - export PATH=$JAVA_HOME/bin:$PATH
    - java -version
    - mvn clean package
  artifacts:
    paths:
      - target/jetbrains-license.jar
    expire_in: 1 day

# 部署
deploy:
 stage: deploy
 rules:
   - when: on_success
 script:
   - eval $(ssh-agent -s)
   - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
   - ssh -o StrictHostKeyChecking=no $USER@$HOST "cp /opt/module/jetbrains-license/jetbrains-license.jar /opt/module/jetbrains-license/jetbrains-license_$(date +\"%Y%m%d%H%M\").jar"
   - scp target/jetbrains-license.jar $USER@$HOST:/opt/module/jetbrains-license/jetbrains-license.jar
   - ssh -o StrictHostKeyChecking=no $USER@$HOST "/opt/module/jetbrains-license/startup.sh"